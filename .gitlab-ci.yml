# rm : 컨테이너 삭제
# rmi : 컨테이너 이미지 삭제
# -d : 백그라운드에서 실행
# -p 80:80 : 호스트의 포트(80)을 컨테이너의 포트(80)과 연결

# 파이프라인 단계 정의
stages:
  - build_and_publish
  - deploy

variables:
  TAG_LATEST: qkrcksgh5654/elice-test-ci:latest
  TAG_COMMIT: qkrcksgh5654/elice-test-ci:$CI_COMMIT_SHORT_SHA

build_and_publish:
  stage: build_and_publish
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PAT
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy:
  stage: deploy
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PAT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f cinemahub-back || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 3000:3000 --env PORT=$PORT --env NAVER_CLIENT_ID=$NAVER_CLIENT_ID --env NAVER_CLIENT_SECRET=$NAVER_CLIENT_SECRET --env NAVER_OAUTH_REDIRECT_URI=$NAVER_OAUTH_REDIRECT_URI --env NAVER_STATE=$NAVER_STATE --env GOOGLE_API_KEY=$GOOGLE_API_KEY --env GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID --env GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET --env GOOGLE_OAUTH_REDIRECT_URI=$GOOGLE_OAUTH_REDIRECT_URI --env FRONT_URL=$FRONT_URL --env MONGODB_URL=$MONGODB_URL --env TMDB_API_KEY=$TMDB_API_KEY --env TMDB_API_BASE_URL=$TMDB_API_BASE_URL --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --env AWS_REGION=$AWS_REGION --env S3_BUCKET_NAME=$S3_BUCKET_NAME --name cinemahub-back $TAG_COMMIT"
  environment:
    name: production
  only:
    - develop
